##Align

可以调整子组件的位置,可以根据子组件的大小来调整自身的大小.

```
const Align({
    Key? key,
    this.alignment = Alignment.center,
    this.widthFactor,
    this.heightFactor,
    Widget? child,
  }) : assert(alignment != null),
       assert(widthFactor == null || widthFactor >= 0.0),
       assert(heightFactor == null || heightFactor >= 0.0),
       super(key: key, child: child);
```

1. aligement: AlignmentGeometry类型<抽象类>表示子组件在父组件中的起始位置. 
   常用的子类：Alignment和FractionalOffse

2. widthFactor,heightFactor
   缩放因子,会分别乘以子组件的宽和高,决定Align的宽和高.必须大于等于0,如果为null,那么组件的宽高会尽可能的大.
  
### Alignment

继承AlignmentGeometry，表示矩形内的一个点，有两个属性x、y，分别表示在水平和垂直方向的偏移。
Alignment会以矩形的中心点作为坐标原点，即Alignment(0.0, 0.0) 。x、y的值从-1到1分别代表矩形左边到右边的距离和顶部到底边的距离，
因此2个水平（或垂直）单位则等于矩形的宽（或高）
如Alignment(-1.0, -1.0) 代表矩形的左侧顶点
而Alignment(1.0, 1.0)代表右侧底部终点
而Alignment(1.0, -1.0) 则正是右侧顶点
即Alignment.topRight
为了使用方便，矩形的原点、四个顶点，以及四条边的终点在Alignment类中都已经定义为了静态常量。
Alignment可以通过其坐标转换公式将其坐标转为子元素的具体偏移坐标：

(Alignment.x * childWidth / 2 + childWidth / 2, Alignment.y * childHeight / 2 + childHeight / 2)
其中childWidth为子元素的宽度，childHeight为子元素高度。


### FractionalOffset

FractionalOffset继承自Alignment，它和Alignment唯一的区别就是坐标原点不同！
FractionalOffset的坐标原点为矩形的左侧顶点，这和布局系统的一致。

FractionalOffset的坐标转换公式为：
(FractionalOffse.x * childWidth, FractionalOffse.y * childHeight)

### Center
就是Align,aligment = Aligement.center;

